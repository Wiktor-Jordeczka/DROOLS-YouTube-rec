package com.sample.rules
 
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;



// Funkcja zadająca pytanie i przyjmująca odpowiedź
function String askQuestion(Question q){
	JPanel panel = new JPanel(); // Tworzymy panel i layout
	panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS)); // elementy jeden pod drugim
    
    List<String> questionOptions = q.getQuestionOptions();
    List<String> questionOptionsTexts = q.getQuestionOptionsTexts();
    int numOfButtons = questionOptions.size();
    String questionText = q.getQuestionText();
    String answer = questionOptions.get(0);
    
    JLabel L1 = new JLabel(questionText); // Treść pytania
    panel.add(L1); 
        
    
    // Tworzymy Radio
    if(q.getChoiceType().equals("radio")){
	    ButtonGroup G1 = new ButtonGroup(); 
	    ArrayList<JRadioButton> radios = new ArrayList<JRadioButton>();
	    for(int i=0; i<numOfButtons; i++) {
	    	radios.add(new JRadioButton());
	    	radios.get(i).setText(questionOptionsTexts.get(i));
	    	panel.add(radios.get(i));
	    	G1.add(radios.get(i));
	    }
	    radios.get(0).setSelected(true);
	    
	    // Zbieramy odpowiedź
	    JOptionPane.showMessageDialog(null, panel, "Pytanie", JOptionPane.INFORMATION_MESSAGE);
	    for(int i=0; i<numOfButtons; i++) {
	    	if(radios.get(i).isSelected()){
	    		answer = questionOptions.get(i);
	    	}
	    }
	}
    return answer;
}

// Klasa pytania
declare Question
	questionName: String
	questionText: String
	choiceType: String
	questionOptions: List<String>
	questionOptionsTexts: List<String>
	answer: String
end

// Wczytanie bazy wiedzy
rule "init"
	when
	then
		HashMap<String, String> resourceValues = new HashMap<String, String>();
		BufferedReader lang = new BufferedReader(new FileReader("src/main/resources/bazaWiedzy/english.csv"));
		lang.readLine();
		lang.lines().forEach(line -> {
			String[] values = line.split(", ");
			resourceValues.put(values[0], values[1]);
		});
		
		BufferedReader general = new BufferedReader(new FileReader("src/main/resources/bazaWiedzy/general.csv"));
		general.readLine();
		general.lines().forEach(line -> {
			String[] values = line.split(", ");
			int numOfOptions = Integer.parseInt(values[2]);
			ArrayList<String> questionOptions = new ArrayList<String>();
			ArrayList<String> questionOptionsTexts = new ArrayList<String>();
			for(int i=0; i<numOfOptions; i++){
				questionOptions.add(values[3+i]);
				questionOptionsTexts.add(resourceValues.get(values[3+i]));
			}
			Question q = new Question(values[0], resourceValues.get(values[0]), values[1], questionOptions, questionOptionsTexts, null);
			insert(q);
		});
end

////////////////////
// SZABLON REGUŁY //
////////////////////
rule "idPytania"
	when
		answered: Question(questionName == "idPytaniaNadrzędnego", answer == "idOdpowiedziNaPytanieNadrzędne")
		q: Question(questionName == "idPytania")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end
////////////////////
////////////////////
////////////////////

rule "startingQuestion"
	when
		q: Question(questionName == "startingQuestion")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "musicianType"
	when
		answered: Question(questionName == "startingQuestion", answer == "musician")
		q: Question(questionName == "musicianType")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "necessaryExist"
	when
		answered: Question(questionName == "musicianType", answer == "muggle")
		q: Question(questionName == "necessaryExist")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "lostShow"
	when
		answered: Question(questionName == "necessaryExist", answer == "yesExist")
		q: Question(questionName == "lostShow")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "couplesMusic"
	when
		answered: Question(questionName == "lostShow", answer == "noShow")
		q: Question(questionName == "couplesMusic")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "easilyOffended"
	when
		answered: Question(questionName == "couplesMusic", answer == "noCouples")
		q: Question(questionName == "easilyOffended")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeUkuleles"
	when
		answered: Question(questionName == "easilyOffended", answer == "yesOffended")
		q: Question(questionName == "likeUkuleles")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "mellowOrRock"
	when
		answered: Question(questionName == "likeUkuleles", answer == "noUkuleles")
		q: Question(questionName == "mellowOrRock")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "normalOrStrangeLyrics"
	when
		answered: Question(questionName == "mellowOrRock", answer == "rock")
		q: Question(questionName == "normalOrStrangeLyrics")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "pianoOrGuitar"
	when
		answered: Question(questionName == "normalOrStrangeLyrics", answer == "normalLyrics")
		q: Question(questionName == "pianoOrGuitar")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "cyrusOrRandom"
	when
		answered: Question(questionName == "normalOrStrangeLyrics", answer == "strangeLyrics")
		q: Question(questionName == "cyrusOrRandom")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "nerdyOrNormalSongs"
	when
		answered: Question(questionName == "likeUkuleles", answer == "yesUkuleles")
		q: Question(questionName == "nerdyOrNormalSongs")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "wizardRock"
	when
		answered: Question(questionName == "musicianType", answer == "wizard")
		q: Question(questionName == "wizardRock")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeElectronica"
	when
		answered: Question(questionName == "couplesMusic", answer == "yesCouples")
		q: Question(questionName == "likeElectronica")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "livePerformances"
	when
		answered: Question(questionName == "wizardRock", answer == "awesome")
		q: Question(questionName == "livePerformances")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "tooCheap"
	when
		answered: Question(questionName == "livePerformances", answer == "noLive")
		q: Question(questionName == "tooCheap")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "whompingWillow"
	when
		answered: Question(questionName == "tooCheap", answer == "noTooCheap")
		q: Question(questionName == "whompingWillow")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "collab or single"
	when
		answered: Question(questionName == "starting question", answer == "vlogger")
		q: Question(questionName == "collab or single")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end