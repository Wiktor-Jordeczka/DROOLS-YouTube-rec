package com.sample.rules
 
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;



// Funkcja zadająca pytanie i przyjmująca odpowiedź
function String askQuestion(Question q){
	JPanel panel = new JPanel(); // Tworzymy panel i layout
	panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS)); // elementy jeden pod drugim
    
    List<String> questionOptions = q.getQuestionOptions();
    int numOfButtons = questionOptions.size();
    String questionText = q.getQuestionText();
    String answer = questionOptions.get(0);
    
    JLabel L1 = new JLabel(questionText); // Treść pytania
    panel.add(L1); 
        
    // Tworzymy Radio
    ButtonGroup G1 = new ButtonGroup(); 
    ArrayList<JRadioButton> radios = new ArrayList<JRadioButton>();
    for(int i=0; i<numOfButtons; i++) {
    	radios.add(new JRadioButton());
    	radios.get(i).setText(questionOptions.get(i));
    	panel.add(radios.get(i));
    	G1.add(radios.get(i));
    }
    radios.get(0).setSelected(true);
    
    // Zbieramy odpowiedź
    JOptionPane.showMessageDialog(null, panel, "Pytanie", JOptionPane.INFORMATION_MESSAGE);
    for(int i=0; i<numOfButtons; i++) {
    	if(radios.get(i).isSelected()){
    		answer = questionOptions.get(i);
    	}
    }
    return answer;
}

// Klasa pytania
declare Question
	questionName: String
	questionText: String
	choiceType: String
	questionOptions: List<String>
	answer: String
end

// Enumerator Radio/Checkbox
/*declare enum ChoiceTypes
	RADIO, CHECK;
end*/

rule "init"
	when
	then
		BufferedReader br = new BufferedReader(new FileReader("src/main/resources/bazaWiedzy/english.csv"));
		br.readLine();
		br.lines().forEach(line -> {
			String[] values = line.split(", ");
			int numOfOptions = Integer.parseInt(values[3]);
			ArrayList<String> questionOptions = new ArrayList<String>();
			for(int i=0; i<numOfOptions; i++){
				questionOptions.add(values[4+i]);
			}
			Question q = new Question(values[0], values[1], values[2], questionOptions, null);
			insert(q);
		});
end

rule "starting question"
	when
		q: Question(questionName == "starting question")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

/*rule "init"
	when
	then
		insert(new Question("What kind of channel do you want to watch?", Arrays.asList("Musician", "Vlogger"), ChoiceTypes.RADIO, ""));
end

rule "Musician"
	when
		q: Question(answer == "Musician")
	then
		insert(new Question("Wizard rocker or muggle musician?", Arrays.asList("Muggle", "Wizard"), ChoiceTypes.RADIO, ""));
end

rule "Muggle"
	when
		q: Question(answer == "Muggle")
	then
		insert(new Question("Is it necessary that they actually exist?", Arrays.asList("Yes", "No"), ChoiceTypes.RADIO, ""));
end

rule "Wizard"
	when
		q: Question(answer == "Wizard")
	then
		insert(new Question("Wizard rock is...", Arrays.asList("Awesome", "Kind of weird"), ChoiceTypes.RADIO, ""));
end
*/

/*
rule "test init"
	when
	then
		insert(new Question("What kind of channel do you want to watch?", Arrays.asList("Musician", "Vlogger"), ChoiceTypes.RADIO, ""));
end

rule "test print"
	when
		q: Question(choiceType == ChoiceTypes.RADIO)
	then
		System.out.println(q.getChoiceType());
end
*/
rule "test gui"
	when
		q: Question(answer == "")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end
