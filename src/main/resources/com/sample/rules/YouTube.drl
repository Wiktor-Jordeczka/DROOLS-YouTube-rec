package com.sample.rules
 
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;


// Funkcja zadająca pytanie i przyjmująca odpowiedź
function String askQuestion(Question q){
	JPanel panel = new JPanel(); // Tworzymy panel i layout
	panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS)); // elementy jeden pod drugim
    
    List<String> questionOptions = q.getQuestionOptions();
    List<String> questionOptionsTexts = q.getQuestionOptionsTexts();
    int numOfButtons = questionOptions.size();
    String questionText = q.getQuestionText();
    String answer = questionOptions.get(0);
    
    JLabel L1 = new JLabel(questionText); // Treść pytania
    panel.add(L1); 
        
    
    // Tworzymy Radio
    if(q.getChoiceType().equals("radio")){
	    ButtonGroup G1 = new ButtonGroup(); 
	    ArrayList<JRadioButton> radios = new ArrayList<JRadioButton>();
	    for(int i=0; i<numOfButtons; i++) {
	    	radios.add(new JRadioButton());
	    	radios.get(i).setText(questionOptionsTexts.get(i));
	    	panel.add(radios.get(i));
	    	G1.add(radios.get(i));
	    }
	    radios.get(0).setSelected(true);
	    
	    // Zbieramy odpowiedź
	    JOptionPane.showMessageDialog(null, panel, "Question", JOptionPane.INFORMATION_MESSAGE);
	    for(int i=0; i<numOfButtons; i++) {
	    	if(radios.get(i).isSelected()){
	    		answer = questionOptions.get(i);
	    	}
	    }
	}
    return answer;
}

// Funkcja wyświetlająca rowiązanie
function void displaySolution(Solution s){
	JPanel panel = new JPanel(); // Tworzymy panel i layout
	panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS)); // elementy jeden pod drugim
    
    String solutionText = s.getSolutionText();
    
    JLabel L0 = new JLabel("Channel to watch:");
    panel.add(L0);
    JLabel L1 = new JLabel(solutionText); // Treść rozwiązania
    panel.add(L1); 
        
    JOptionPane.showMessageDialog(null, panel, "Solution found!", JOptionPane.INFORMATION_MESSAGE);
}

// Klasa pytania
declare Question
	questionName: String
	questionText: String
	choiceType: String
	questionOptions: List<String>
	questionOptionsTexts: List<String>
	answer: String
end

// Klasa rozwiązania
declare Solution
	solutionName: String
	solutionText: String
	isTrue: Boolean
end

// Wczytanie bazy wiedzy
rule "init"
	when
	then
		// Słownik pytań i odpowiedzi
		HashMap<String, String> resourceValues = new HashMap<String, String>();
		BufferedReader lang = new BufferedReader(new FileReader("src/main/resources/bazaWiedzy/englishQuestions.csv"));
		lang.readLine();
		lang.lines().forEach(line -> {
			String[] values = line.split("; ");
			resourceValues.put(values[0], values[1]);
		});
		
		// Słownik rozwiązań
		BufferedReader sol = new BufferedReader(new FileReader("src/main/resources/bazaWiedzy/englishSolutions.csv"));
		sol.readLine();
		sol.lines().forEach(line -> {
			String[] values = line.split("; ");
			Solution s = new Solution(values[0], values[1], false);
			insert(s);
		});
		
		// Wczytanie Id i odpowiadających im wartości
		BufferedReader general = new BufferedReader(new FileReader("src/main/resources/bazaWiedzy/general.csv"));
		general.readLine();
		general.lines().forEach(line -> {
			String[] values = line.split("; ");
			int numOfOptions = Integer.parseInt(values[2]);
			ArrayList<String> questionOptions = new ArrayList<String>();
			ArrayList<String> questionOptionsTexts = new ArrayList<String>();
			for(int i=0; i<numOfOptions; i++){
				questionOptions.add(values[3+i]);
				questionOptionsTexts.add(resourceValues.get(values[3+i]));
			}
			Question q = new Question(values[0], resourceValues.get(values[0]), values[1], questionOptions, questionOptionsTexts, null);
			insert(q);
		});
end

// Odczytanie rozwiązania
rule "showSolution"
	when
		s: Solution(isTrue == true)
	then
		displaySolution(s);
end

//////////////////
// Reguły pytań //
//////////////////

// MUSICIAN //

rule "startingQuestion"
	when
		q: Question(questionName == "startingQuestion")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "musicianType"
	when
		answered: Question(questionName == "startingQuestion", answer == "musician")
		q: Question(questionName == "musicianType")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "necessaryExist"
	when
		answered: Question(questionName == "musicianType", answer == "muggle")
		q: Question(questionName == "necessaryExist")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "lostShow"
	when
		answered: Question(questionName == "necessaryExist", answer == "yesExist")
		q: Question(questionName == "lostShow")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "couplesMusic"
	when
		answered: Question(questionName == "lostShow", answer == "noShow")
		q: Question(questionName == "couplesMusic")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "easilyOffended"
	when
		answered: Question(questionName == "couplesMusic", answer == "noCouples")
		q: Question(questionName == "easilyOffended")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeUkuleles"
	when
		answered: Question(questionName == "easilyOffended", answer == "yesOffended")
		q: Question(questionName == "likeUkuleles")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "mellowOrRock"
	when
		answered: Question(questionName == "likeUkuleles", answer == "noUkuleles")
		q: Question(questionName == "mellowOrRock")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "normalOrStrangeLyrics"
	when
		answered: Question(questionName == "mellowOrRock", answer == "rock")
		q: Question(questionName == "normalOrStrangeLyrics")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "pianoOrGuitar"
	when
		answered: Question(questionName == "normalOrStrangeLyrics", answer == "normalLyrics")
		q: Question(questionName == "pianoOrGuitar")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "cyrusOrRandom"
	when
		answered: Question(questionName == "normalOrStrangeLyrics", answer == "strangeLyrics")
		q: Question(questionName == "cyrusOrRandom")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "nerdyOrNormalSongs"
	when
		answered: Question(questionName == "likeUkuleles", answer == "yesUkuleles")
		q: Question(questionName == "nerdyOrNormalSongs")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "wizardRock"
	when
		answered: Question(questionName == "musicianType", answer == "wizard")
		q: Question(questionName == "wizardRock")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeElectronica"
	when
		answered: Question(questionName == "couplesMusic", answer == "yesCouples")
		q: Question(questionName == "likeElectronica")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "livePerformances"
	when
		answered: Question(questionName == "wizardRock", answer == "awesome")
		q: Question(questionName == "livePerformances")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "tooCheap"
	when
		answered: Question(questionName == "livePerformances", answer == "noLive")
		q: Question(questionName == "tooCheap")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "whompingWillow"
	when
		answered: Question(questionName == "tooCheap", answer == "noTooCheap")
		q: Question(questionName == "whompingWillow")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

/////////////
// VLOGGER //
/////////////

rule "collabOrSingle"
	when
		answered: Question(questionName == "startingQuestion", answer == "vlogger")
		q: Question(questionName == "collabOrSingle")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "newOrOldVideos"
	when
		answered: Question(questionName == "collabOrSingle", answer == "collab")
		q: Question(questionName == "newOrOldVideos")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "relationships"
	when
		answered: Question(questionName == "newOrOldVideos", answer == "new")
		q: Question(questionName == "relationships")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "doctorWho"
	when
		answered: Question(questionName == "relationships", answer == "sick")
		q: Question(questionName == "doctorWho")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "howManyWatch"
	when
		answered: Question(questionName == "doctorWho", answer == "noDoctor")
		q: Question(questionName == "howManyWatch")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "shortOrTall"
	when
		answered: Question(questionName == "howManyWatch", answer == "two")
		q: Question(questionName == "shortOrTall")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "tallGirlsOrBoys"
	when
		answered: Question(questionName == "shortOrTall", answer == "tall")
		q: Question(questionName == "tallGirlsOrBoys")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "whatKindOfAccent"
	when
		answered: Question(questionName == "collabOrSingle", answer == "single")
		q: Question(questionName == "whatKindOfAccent")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "canadaIsCool"
	when
		answered: Question(questionName == "whatKindOfAccent", answer == "otherAccent")
		q: Question(questionName == "canadaIsCool")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "whichIsFunnier"
	when
		answered: Question(questionName == "canadaIsCool", answer == "noCanada")
		q: Question(questionName == "whichIsFunnier")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "davidTennantAttractive"
	when
		answered: Question(questionName == "whatKindOfAccent", answer == "britishAccent")
		q: Question(questionName == "davidTennantAttractive")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "instrumentBoysHot"
	when
		answered: Question(questionName == "davidTennantAttractive", answer == "noDavid")
		q: Question(questionName == "instrumentBoysHot")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "hateTwilight"
	when
		answered: Question(questionName == "instrumentBoysHot", answer == "yesHotBoys")
		q: Question(questionName == "hateTwilight")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "scriptedOrSpontaneous"
	when
		answered: Question(questionName == "instrumentBoysHot", answer == "noHotBoys")
		q: Question(questionName == "scriptedOrSpontaneous")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "singSometimesOrNever"
	when
		answered: Question(questionName == "whatKindOfAccent", answer == "americanAccent")
		q: Question(questionName == "singSometimesOrNever")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "dailyVideos"
	when
		answered: Question(questionName == "singSometimesOrNever", answer == "never")
		q: Question(questionName == "dailyVideos")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "needAdvice"
	when
		answered: Question(questionName == "dailyVideos", answer == "noDaily")
		q: Question(questionName == "needAdvice")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likePeoplePlay"
	when
		answered: Question(questionName == "needAdvice", answer == "noAdvice")
		q: Question(questionName == "likePeoplePlay")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "howManySubscribers"
	when
		answered: Question(questionName == "likePeoplePlay", answer == "noPlay")
		q: Question(questionName == "howManySubscribers")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "wantToWatch"
	when
		answered: Question(questionName == "howManySubscribers", answer == "moreSubscribers")
		q: Question(questionName == "wantToWatch")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "typographyIsCool"
	when
		answered: Question(questionName == "howManySubscribers", answer == "lessSubscribers")
		q: Question(questionName == "typographyIsCool")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "fiveAwesomes"
	when
		answered: Question(questionName == "typographyIsCool", answer == "noTypography")
		q: Question(questionName == "fiveAwesomes")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "awesomeGirlsOrBoys"
	when
		answered: Question(questionName == "fiveAwesomes", answer == "yesFiveAwesomes")
		q: Question(questionName == "awesomeGirlsOrBoys")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "youArePicky"
	when
		answered: Question(questionName == "fiveAwesomes", answer == "noFiveAwesomes")
		q: Question(questionName == "youArePicky")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeRapping"
	when
		answered: Question(questionName == "singSometimesOrNever", answer == "sometimes")
		q: Question(questionName == "likeRapping")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeBreakfastSongs"
	when
		answered: Question(questionName == "likeRapping", answer == "noRapping")
		q: Question(questionName == "likeBreakfastSongs")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeChartsGraphs"
	when
		answered: Question(questionName == "likeBreakfastSongs", answer == "noBreakfast")
		q: Question(questionName == "likeChartsGraphs")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "loveAllCaps"
	when
		answered: Question(questionName == "likeChartsGraphs", answer == "noCharts")
		q: Question(questionName == "loveAllCaps")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "girlsOrBoysRule"
	when
		answered: Question(questionName == "loveAllCaps", answer == "yesLoveCaps")
		q: Question(questionName == "girlsOrBoysRule")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "insistFiveAwesomeGirl"
	when
		answered: Question(questionName == "loveAllCaps", answer == "noLoveCaps")
		q: Question(questionName == "insistFiveAwesomeGirl")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "likeReallyHappy"
	when
		answered: Question(questionName == "insistFiveAwesomeGirl", answer == "noInsist")
		q: Question(questionName == "likeReallyHappy")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "talkSlowOrFast"
	when
		answered: Question(questionName == "likeReallyHappy", answer == "noLikeHappy")
		q: Question(questionName == "talkSlowOrFast")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

rule "preferReview"
	when
		answered: Question(questionName == "talkSlowOrFast", answer == "talkSlow")
		q: Question(questionName == "preferReview")
	then
		q.setAnswer(askQuestion(q));
		update(q);
end

////////////////////
// REGUŁY KOŃCOWE //
////////////////////

// MUSICIAN //

rule "necessaryExistNo"
	when
		answered: Question(questionName == "necessaryExist", answer == "noExist")
		s: Solution(solutionName == "necessaryExistNo")
	then
		s.setIsTrue(true);
		update(s);
end

rule "easilyOffendedNo"
	when
		answered: Question(questionName == "easilyOffended", answer == "noOffended")
		s: Solution(solutionName == "easilyOffendedNo")
	then
		s.setIsTrue(true);
		update(s);
end

rule "mellowOrRockMellow"
	when
		answered: Question(questionName == "mellowOrRock", answer == "mellow")
		s: Solution(solutionName == "mellowOrRockMellow")
	then
		s.setIsTrue(true);
		update(s);
end

rule "pianoOrGuitarPiano"
	when
		answered: Question(questionName == "pianoOrGuitar", answer == "piano")
		s: Solution(solutionName == "pianoOrGuitarPiano")
	then
		s.setIsTrue(true);
		update(s);
end

rule "pianoOrGuitarGuitar"
	when
		answered: Question(questionName == "pianoOrGuitar", answer == "guitar")
		s: Solution(solutionName == "pianoOrGuitarGuitar")
	then
		s.setIsTrue(true);
		update(s);
end

rule "cyrusOrRandomCyrus"
	when
		answered: Question(questionName == "cyrusOrRandom", answer == "cyrus")
		s: Solution(solutionName == "cyrusOrRandomCyrus")
	then
		s.setIsTrue(true);
		update(s);
end

rule "cyrusOrRandomRandom"
	when
		answered: Question(questionName == "cyrusOrRandom", answer == "random")
		s: Solution(solutionName == "cyrusOrRandomRandom")
	then
		s.setIsTrue(true);
		update(s);
end

rule "nerdyOrNormalSongsNormal"
	when
		answered: Question(questionName == "nerdyOrNormalSongs", answer == "normalSongs")
		s: Solution(solutionName == "nerdyOrNormalSongsNormal")
	then
		s.setIsTrue(true);
		update(s);
end

rule "nerdyOrNormalSongsNerdy"
	when
		answered: Question(questionName == "nerdyOrNormalSongs", answer == "nerdySongs")
		s: Solution(solutionName == "nerdyOrNormalSongsNerdy")
	then
		s.setIsTrue(true);
		update(s);
end

rule "likeElectronicaYes"
	when
		answered: Question(questionName == "likeElectronica", answer == "yesElectronica")
		s: Solution(solutionName == "likeElectronicaYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "likeElectronicaNo"
	when
		answered: Question(questionName == "likeElectronica", answer == "noElectronica")
		s: Solution(solutionName == "likeElectronicaNo")
	then
		s.setIsTrue(true);
		update(s);
end

rule "lostShowYes"
	when
		answered: Question(questionName == "lostShow", answer == "yesShow")
		s: Solution(solutionName == "lostShowYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "wizardRockWeird"
	when
		answered: Question(questionName == "wizardRock", answer == "weird")
		s: Solution(solutionName == "wizardRockWeird")
	then
		s.setIsTrue(true);
		update(s);
end

rule "livePerformancesYes"
	when
		answered: Question(questionName == "livePerformances", answer == "yesLive")
		s: Solution(solutionName == "livePerformancesYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "tooCheapYes"
	when
		answered: Question(questionName == "tooCheap", answer == "yesTooCheap")
		s: Solution(solutionName == "tooCheapYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "whompingWillowYes"
	when
		answered: Question(questionName == "whompingWillow", answer == "yesWillow")
		s: Solution(solutionName == "whompingWillowYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "whompingWillowNo"
	when
		answered: Question(questionName == "whompingWillow", answer == "noWillow")
		s: Solution(solutionName == "whompingWillowNo")
	then
		s.setIsTrue(true);
		update(s);
end

/////////////
// VLOGGER //
/////////////

rule "newOrOldVideosOld"
	when
		answered: Question(questionName == "newOrOldVideos", answer == "old")
		s: Solution(solutionName == "newOrOldVideosOld")
	then
		s.setIsTrue(true);
		update(s);
end

rule "relationshipsHappy"
	when
		answered: Question(questionName == "relationships", answer == "happy")
		s: Solution(solutionName == "relationshipsHappy")
	then
		s.setIsTrue(true);
		update(s);
end

rule "doctorWhoYes"
	when
		answered: Question(questionName == "doctorWho", answer == "yesDoctor")
		s: Solution(solutionName == "doctorWhoYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "howManyWatchFive"
	when
		answered: Question(questionName == "howManyWatch", answer == "five")
		s: Solution(solutionName == "howManyWatchFive")
	then
		s.setIsTrue(true);
		update(s);
end

rule "shortOrTallShort"
	when
		answered: Question(questionName == "shortOrTall", answer == "short")
		s: Solution(solutionName == "shortOrTallShort")
	then
		s.setIsTrue(true);
		update(s);
end

rule "tallGirlsOrBoysGirls"
	when
		answered: Question(questionName == "tallGirlsOrBoys", answer == "tallGirls")
		s: Solution(solutionName == "tallGirlsOrBoysGirls")
	then
		s.setIsTrue(true);
		update(s);
end

rule "tallGirlsOrBoysBoys"
	when
		answered: Question(questionName == "tallGirlsOrBoys", answer == "tallBoys")
		s: Solution(solutionName == "tallGirlsOrBoysBoys")
	then
		s.setIsTrue(true);
		update(s);
end

rule "canadaIsCoolYes"
	when
		answered: Question(questionName == "canadaIsCool", answer == "yesCanada")
		s: Solution(solutionName == "canadaIsCoolYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "whichIsFunnierChicken"
	when
		answered: Question(questionName == "whichIsFunnier", answer == "chickenJokes")
		s: Solution(solutionName == "whichIsFunnierChicken")
	then
		s.setIsTrue(true);
		update(s);
end

rule "whichIsFunnierDeprecating"
	when
		answered: Question(questionName == "whichIsFunnier", answer == "deprecatingHumor")
		s: Solution(solutionName == "whichIsFunnierDeprecating")
	then
		s.setIsTrue(true);
		update(s);
end

rule "davidTennantAttractiveYes"
	when
		answered: Question(questionName == "davidTennantAttractive", answer == "yesDavid")
		s: Solution(solutionName == "davidTennantAttractiveYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "hateTwilightYes"
	when
		answered: Question(questionName == "hateTwilight", answer == "yesTwilight")
		s: Solution(solutionName == "hateTwilightYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "hateTwilightNo"
	when
		answered: Question(questionName == "hateTwilight", answer == "noTwilight")
		s: Solution(solutionName == "hateTwilightNo")
	then
		s.setIsTrue(true);
		update(s);
end

rule "hateTwilightOther"
	when
		answered: Question(questionName == "hateTwilight", answer == "otherTwilight")
		s: Solution(solutionName == "hateTwilightOther")
	then
		s.setIsTrue(true);
		update(s);
end

rule "scriptedOrSpontaneousSpontaneous"
	when
		answered: Question(questionName == "scriptedOrSpontaneous", answer == "spontaneous")
		s: Solution(solutionName == "scriptedOrSpontaneousSpontaneous")
	then
		s.setIsTrue(true);
		update(s);
end

rule "scriptedOrSpontaneousScripted"
	when
		answered: Question(questionName == "scriptedOrSpontaneous", answer == "scripted")
		s: Solution(solutionName == "scriptedOrSpontaneousScripted")
	then
		s.setIsTrue(true);
		update(s);
end

rule "dailyVideosYes"
	when
		answered: Question(questionName == "dailyVideos", answer == "yesDaily")
		s: Solution(solutionName == "dailyVideosYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "needAdviceYes"
	when
		answered: Question(questionName == "needAdvice", answer == "yesAdvice")
		s: Solution(solutionName == "needAdviceYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "likePeoplePlayYes"
	when
		answered: Question(questionName == "likePeoplePlay", answer == "yesPlay")
		s: Solution(solutionName == "likePeoplePlayYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "wantToWatchWorldIssues"
	when
		answered: Question(questionName == "wantToWatch", answer == "worldIssues")
		s: Solution(solutionName == "wantToWatchWorldIssues")
	then
		s.setIsTrue(true);
		update(s);
end

rule "wantToWatchRant"
	when
		answered: Question(questionName == "wantToWatch", answer == "rant")
		s: Solution(solutionName == "wantToWatchRant")
	then
		s.setIsTrue(true);
		update(s);
end

rule "wantToWatchMakeUp"
	when
		answered: Question(questionName == "wantToWatch", answer == "makeUp")
		s: Solution(solutionName == "wantToWatchMakeUp")
	then
		s.setIsTrue(true);
		update(s);
end

rule "typographyIsCoolYes"
	when
		answered: Question(questionName == "typographyIsCool", answer == "yesTypography")
		s: Solution(solutionName == "typographyIsCoolYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "fiveAwesomesNo"
	when
		answered: Question(questionName == "fiveAwesomes", answer == "noFiveAwesomes")
		s: Solution(solutionName == "fiveAwesomesNo")
	then
		s.setIsTrue(true);
		update(s);
end

rule "awesomeGirlsOrBoysGirls"
	when
		answered: Question(questionName == "awesomeGirlsOrBoys", answer == "awesomeGirls")
		s: Solution(solutionName == "awesomeGirlsOrBoysGirls")
	then
		s.setIsTrue(true);
		update(s);
end

rule "awesomeGirlsOrBoysBoys"
	when
		answered: Question(questionName == "awesomeGirlsOrBoys", answer == "awesomeBoys")
		s: Solution(solutionName == "awesomeGirlsOrBoysBoys")
	then
		s.setIsTrue(true);
		update(s);
end

rule "likeRappingYes"
	when
		answered: Question(questionName == "likeRapping", answer == "yesRapping")
		s: Solution(solutionName == "likeRappingYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "likeBreakfastSongsYes"
	when
		answered: Question(questionName == "likeBreakfastSongs", answer == "yesBreakfast")
		s: Solution(solutionName == "likeBreakfastSongsYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "likeChartsGraphsYes"
	when
		answered: Question(questionName == "likeChartsGraphs", answer == "yesCharts")
		s: Solution(solutionName == "likeChartsGraphsYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "girlsOrBoysRuleGirls"
	when
		answered: Question(questionName == "girlsOrBoysRule", answer == "girlsRule")
		s: Solution(solutionName == "girlsOrBoysRuleGirls")
	then
		s.setIsTrue(true);
		update(s);
end

rule "girlsOrBoysRuleBoys"
	when
		answered: Question(questionName == "girlsOrBoysRule", answer == "boysRule")
		s: Solution(solutionName == "girlsOrBoysRuleBoys")
	then
		s.setIsTrue(true);
		update(s);
end

rule "insistFiveAwesomeGirlYes"
	when
		answered: Question(questionName == "insistFiveAwesomeGirl", answer == "yesInsist")
		s: Solution(solutionName == "insistFiveAwesomeGirlYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "likeReallyHappyYes"
	when
		answered: Question(questionName == "likeReallyHappy", answer == "yesLikeHappy")
		s: Solution(solutionName == "likeReallyHappyYes")
	then
		s.setIsTrue(true);
		update(s);
end

rule "talkSlowOrFastFast"
	when
		answered: Question(questionName == "talkSlowOrFast", answer == "talkFast")
		s: Solution(solutionName == "talkSlowOrFastFast")
	then
		s.setIsTrue(true);
		update(s);
end

rule "preferReviewTech"
	when
		answered: Question(questionName == "preferReview", answer == "reviewTech")
		s: Solution(solutionName == "preferReviewTech")
	then
		s.setIsTrue(true);
		update(s);
end

rule "preferReviewBooks"
	when
		answered: Question(questionName == "preferReview", answer == "reviewBooks")
		s: Solution(solutionName == "preferReviewBooks")
	then
		s.setIsTrue(true);
		update(s);
end